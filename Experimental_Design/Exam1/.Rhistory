mu.hat=x.bar.star
sig.hat=s.star-x.bar.star%*%t(x.bar.star)
# gradient
#
invsig=solve(sig)
gradM=-n*invsig%*%(mu-x.bar.star)
A = s.star-mu%*%t(x.bar.star)-x.bar.star%*%t(mu)+mu%*%t(mu)
B = invsig%*%(sig-A)%*%invsig
C=(-n/2)*(B+t(B)-diag(diag(B)))
gradS=C[upper.tri(C,diag = TRUE)==TRUE]
grad=matrix(0,p+p*(p+1)/2,1)
grad[1:p] = gradM
grad[(p+1):length(grad)] = gradS
norm=norm(grad,type = "f")
# reassigning mu and sig
#
if(it==1||it==2||it==3||it==33||it==34||it==35){
print(sprintf(' %2.0f %8.5f %8.5f %8.5f %8.5f %8.7f ',(it-1),mu[1],mu[3],sig[1,1],sig[1,3],norm),quote=FALSE)
}
mu=mu.hat
sig=sig.hat
if(norm<1e-6)stop=1
}
list(mu=mu,sig=sig)
}
em(trivariatenormal,mu,sig,maxit)
knitr::opts_chunk$set(echo = TRUE)
mcnorm <- function (n, a, b) {
x = runif(n,a,b)
g = exp(-x)/(1+x^2)
tetah=(b-a)*mean(g) # this is the Monte Carlo approximation to the integral
tetah_se=(b-a)*sd(g)/sqrt(n) #This is the standard error of the approimation
list(tetah=tetah,tetah_se=tetah_se)
}
n = 20000
a=0; b=1
I.4 = mcnorm(n,a,b)
output <- data.frame( M_C_approx = I.4$tetah, S.E. = I.4$tetah_se)
print(output)
u = runif(n/2,0,1)
gu1 = exp(-u)/(1+u^2)
gu2 = exp(-(1-u))/(1+(1-u)^2)
tetah_b = sum(gu1+gu2)/n
tetaha_b_se = sd(gu1+gu2)/sqrt(n)
print(c(tetah_b,tetaha_b_se))
cor(gu1,gu2)
a.2=function(u){
x=-log(1-(1-1/exp(1))*u)
return(x)
}
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
c = runif(n/2,0,1)
u = a.2(c)
gu1 = exp(-u)/(1+u^2)
gu2 = exp(-(1-u))/(1+(1-u)^2)
tetah_c = sum(gu1+gu2)/n
tetaha_c_se = sd(gu1+gu2)/sqrt(n)
print(c(tetah_c,tetaha_c_se))
library(MASS)
hitmiss <- function (n, mu, sigma,a , b, c) {
s=mvrnorm( n, mu, sigma, tol = 1e-6, empirical = FALSE)
tetah = sum(s[,1]<a & s[,2]<b & s[,3]<c)/n # this is the hit-miss approximation to the integral
tetah_se = sqrt((tetah-tetah^2)/n) #This is the standard error of the approimation
return(list(tetah=tetah,tetah_se=tetah_se))
}
n = 20000
a=1; b=4; c=2
mu=c(0,0,0)
sigma = matrix(c(1,3/5,1/3,3/5,1,11/15,1/3,11/15,1),3,3)
I = hitmiss(n, mu, sigma, a, b, c)
I
theta = I$tetah
stdv = I$tetah_se
z = qnorm(.9725,0,1)
lower.bound = theta-z*stdv
upper.bound = theta+z*stdv
print("       Confidence Interval",quote = FALSE)
paste0("(", lower.bound ,",",upper.bound  ,")")
n = 20000
mu = exp(-.5)*atan(1)
x = runif(n,0,1)
g = (1/(1+x^2))*exp(-x)
h = (1/(1+x^2))*exp(-.5)
c.star = -cov(h,g)/var(h)
theta.hat.c = sum(g+c.star*(h-mu))/n
theta.hat.c = mean(g+c.star*(h-mu))
theta.hat.c
sqrt(I.4$tetah_se^2-cor(g,h)^2*I.4$tetah_se^2)
var.cv=(1/n)*(var(g)-(cov(g,h)^2)/var(h))
se.cv=sqrt(var.cv)
se.cv
n = 20000
u = runif(n,0,1)
x=1-sqrt(1-u)
g = (1/(1+x^2))*exp(-x)
h = (1/(1+x^2))*exp(-.5)
f=2*(1-x)
gf=g/f
hf=h/f
mu=exp(-.5)*atan(1)
c.star = -cov(hf,gf)/var(hf)
theta.hat.c = sum(gf+c.star*(hf-mu))/n
theta.hat.c = mean(gf+c.star*(hf-mu))
theta.hat.c
var.cv=(1/n)*(var(gf)-(cov(gf,hf)^2)/var(hf))
se.cv=sqrt(var.cv)
se.cv
library(reshape2)
setwd("C:\\Users\\User\\Desktop\\School\\Math_531T\\Exam1")
#####################################################
#1)
#####################################################
#2)
data<-read.table("http://www2.isye.gatech.edu/%7Ejeffwu/book/data/pulp.dat", h=T)
Y = as.matrix(data)
n = rep(nrow(Y),ncol(Y))
k=ncol(Y)
N=sum(n)
alpha = 0.05
Yidot = apply(Y, 2, mean) # sample mean for each treatment
avgY = mean(Yidot) # grand mean
kprime <- choose(k,2)
kprime = choose(k,2)
res = sum((Y-t(Yidot%*%t(rep(1,5))))^2)/(N-k)
b=qt(1-(alpha/(2*kprime)), N-k)*sqrt(2/5*res)
t=qtukey(1-alpha,k,N-k)/sqrt(2)*sqrt(2/5*res)
stats=matrix(0,ncol(Y)-1,ncol(Y))
for(j in 1:ncol(Y)-1)
{
for(i in j:ncol(Y))
{
stats[j,i]=Yidot[i]-Yidot[j]
}
}
uppBoundB=stats
uppBoundB[1,2:4]=stats[1,2:4]+b
uppBoundB[2,3:4]=stats[2,3:4]+b
uppBoundB[3,4]=stats[3,4]+b
lowBoundB=stats
lowBoundB[1,2:4]=stats[1,2:4]-b
lowBoundB[2,3:4]=stats[2,3:4]-b
lowBoundB[3,4]=stats[3,4]-b
uppBoundT=stats
uppBoundT[1,2:4]=stats[1,2:4]+t
uppBoundT[2,3:4]=stats[2,3:4]+t
uppBoundT[3,4]=stats[3,4]+t
lowBoundT=stats
lowBoundT[1,2:4]=stats[1,2:4]-t
lowBoundT[2,3:4]=stats[2,3:4]-t
lowBoundT[3,4]=stats[3,4]-t
#####################################################
#3)
#b)
f=21.47/2.39
pf(f,3,26,lower=F)
#c)
yA=66.1
yB=65.75
yC=62.63
yD=63.85
k=4
Nk=26
alpha = 0.01
a=1/7
b=1/8
c=1/9
d=1/6
AB=abs(yA-yB)/(sqrt(2.39*(a+b)))
AC=abs(yA-yC)/(sqrt(2.39*(a+c)))
AD=abs(yA-yD)/(sqrt(2.39*(a+d)))
BC=abs(yB-yC)/(sqrt(2.39*(b+c)))
BD=abs(yB-yD)/(sqrt(2.39*(b+d)))
CD=abs(yC-yD)/(sqrt(2.39*(c+d)))
qtukey(1-alpha,k,Nk)/sqrt(2)
AB
AC
AD
BC
BD
CD
#D)
con=1/2*(yA+yB)-1/2*(yC+yD)
con2=c(1/2,1/2,-1/2,-1/2)
contrasts(as.factor(con2))
pf(f,3,26,lower=F)
#####################################################
#4)
data=read.csv("cement.csv")
head(data)
data.m = melt(data)
g=lm(value~variable, data = data.m)
anova(g)
Y = as.matrix(data)
n = rep(nrow(Y),ncol(Y))
k=ncol(Y)
N=sum(n)
alpha = 0.05
Yidot = apply(Y, 2, mean) # sample mean for each treatment
avgY = mean(Yidot) # grand mean
kprime <- choose(k,2)
kprime = choose(k,2)
res = sum((Y-t(Yidot%*%t(rep(1,nrow(Y)))))^2)/(N-k)
b=qt(1-(alpha/(2*kprime)), N-k)*sqrt(2/5*res)
t=qtukey(1-alpha,k,N-k)/sqrt(2)*sqrt(2/5*res)
stats=matrix(0,ncol(Y)-1,ncol(Y))
for(j in 1:ncol(Y)-1)
{
for(i in j:ncol(Y))
{
stats[j,i]=Yidot[i]-Yidot[j]
}
}
uppBoundB=stats
uppBoundB[1,2:3]=stats[1,2:3]+b
uppBoundB[2,3]=stats[2,3]+b
lowBoundB=stats
lowBoundB[1,2:3]=stats[1,2:3]-b
lowBoundB[2,3]=stats[2,3]-b
uppBoundT=stats
uppBoundT[1,2:3]=stats[1,2:3]+t
uppBoundT[2,3]=stats[2,3]+t
lowBoundT=stats
lowBoundT[1,2:3]=stats[1,2:3]-t
lowBoundT[2,3]=stats[2,3]-t
library(reshape2)
setwd("C:\\Users\\User\\Desktop\\School\\Math_531T\\Exam1")
#####################################################
#1)
#####################################################
#2)
data<-read.table("http://www2.isye.gatech.edu/%7Ejeffwu/book/data/pulp.dat", h=T)
Y = as.matrix(data)
n = rep(nrow(Y),ncol(Y))
k=ncol(Y)
N=sum(n)
alpha = 0.05
Yidot = apply(Y, 2, mean) # sample mean for each treatment
avgY = mean(Yidot) # grand mean
kprime <- choose(k,2)
kprime = choose(k,2)
res = sum((Y-t(Yidot%*%t(rep(1,5))))^2)/(N-k)
b=qt(1-(alpha/(2*kprime)), N-k)*sqrt(2/5*res)
t=qtukey(1-alpha,k,N-k)/sqrt(2)*sqrt(2/5*res)
stats=matrix(0,ncol(Y)-1,ncol(Y))
for(j in 1:ncol(Y)-1)
{
for(i in j:ncol(Y))
{
stats[j,i]=Yidot[i]-Yidot[j]
}
}
uppBoundB=stats
uppBoundB[1,2:4]=stats[1,2:4]+b
uppBoundB[2,3:4]=stats[2,3:4]+b
uppBoundB[3,4]=stats[3,4]+b
lowBoundB=stats
lowBoundB[1,2:4]=stats[1,2:4]-b
lowBoundB[2,3:4]=stats[2,3:4]-b
lowBoundB[3,4]=stats[3,4]-b
uppBoundT=stats
uppBoundT[1,2:4]=stats[1,2:4]+t
uppBoundT[2,3:4]=stats[2,3:4]+t
uppBoundT[3,4]=stats[3,4]+t
lowBoundT=stats
lowBoundT[1,2:4]=stats[1,2:4]-t
lowBoundT[2,3:4]=stats[2,3:4]-t
lowBoundT[3,4]=stats[3,4]-t
uppBoundB
lowBoundB
uppBoundT
lowBoundT
#b)
f=21.47/2.39
pf(f,3,26,lower=F)
help(pf)
21.47/2.39
pf(f,3,26)
1-pf(f,3,26)
pf(f,3,26,lower=F)*2
21.47/2.39
yA=66.1
yB=65.75
yC=62.63
yD=63.85
k=4
Nk=26
alpha = 0.01
a=1/7
b=1/8
c=1/9
d=1/6
AB=abs(yA-yB)/(sqrt(2.39*(a+b)))
AC=abs(yA-yC)/(sqrt(2.39*(a+c)))
AD=abs(yA-yD)/(sqrt(2.39*(a+d)))
BC=abs(yB-yC)/(sqrt(2.39*(b+c)))
BD=abs(yB-yD)/(sqrt(2.39*(b+d)))
CD=abs(yC-yD)/(sqrt(2.39*(c+d)))
qtukey(1-alpha,k,Nk)/sqrt(2)
AB
AC
AD
BC
BD
CD
con=1/2*(yA+yB)-1/2*(yC+yD)
con2=c(1/2,1/2,-1/2,-1/2)
contrasts(as.factor(con2))
pf(f,3,26,lower=F)
pf(f,3,26,lower=F)*2
con=1/2*(yA+yB)-1/2*(yC+yD)
con2=c(1/2,1/2,-1/2,-1/2)
contrasts(con2,c(1,0,-1,0))
contrasts(as.factors(con2),as.factors(c(1,0,-1,0)))
contrasts(as.factor(con2),as.factor(c(1,0,-1,0)))
library(reshape2)
setwd("C:\\Users\\User\\Desktop\\School\\Math_531T\\Exam1")
#####################################################
#1)
#####################################################
#2)
data<-read.table("http://www2.isye.gatech.edu/%7Ejeffwu/book/data/pulp.dat", h=T)
Y = as.matrix(data)
n = rep(nrow(Y),ncol(Y))
k=ncol(Y)
N=sum(n)
alpha = 0.05
Yidot = apply(Y, 2, mean) # sample mean for each treatment
avgY = mean(Yidot) # grand mean
kprime <- choose(k,2)
kprime = choose(k,2)
res = sum((Y-t(Yidot%*%t(rep(1,5))))^2)/(N-k)
b=qt(1-(alpha/(2*kprime)), N-k)*sqrt(2/5*res)
t=qtukey(1-alpha,k,N-k)/sqrt(2)*sqrt(2/5*res)
stats=matrix(0,ncol(Y)-1,ncol(Y))
for(j in 1:ncol(Y)-1)
{
for(i in j:ncol(Y))
{
stats[j,i]=Yidot[i]-Yidot[j]
}
}
uppBoundB=stats
uppBoundB[1,2:4]=stats[1,2:4]+b
uppBoundB[2,3:4]=stats[2,3:4]+b
uppBoundB[3,4]=stats[3,4]+b
lowBoundB=stats
lowBoundB[1,2:4]=stats[1,2:4]-b
lowBoundB[2,3:4]=stats[2,3:4]-b
lowBoundB[3,4]=stats[3,4]-b
uppBoundT=stats
uppBoundT[1,2:4]=stats[1,2:4]+t
uppBoundT[2,3:4]=stats[2,3:4]+t
uppBoundT[3,4]=stats[3,4]+t
lowBoundT=stats
lowBoundT[1,2:4]=stats[1,2:4]-t
lowBoundT[2,3:4]=stats[2,3:4]-t
lowBoundT[3,4]=stats[3,4]-t
#####################################################
#3)
#b)
f=21.47/2.39
pf(f,3,26,lower=F)*2
#c)
yA=66.1
yB=65.75
yC=62.63
yD=63.85
k=4
Nk=26
alpha = 0.01
a=1/7
b=1/8
c=1/9
d=1/6
AB=abs(yA-yB)/(sqrt(2.39*(a+b)))
AC=abs(yA-yC)/(sqrt(2.39*(a+c)))
AD=abs(yA-yD)/(sqrt(2.39*(a+d)))
BC=abs(yB-yC)/(sqrt(2.39*(b+c)))
BD=abs(yB-yD)/(sqrt(2.39*(b+d)))
CD=abs(yC-yD)/(sqrt(2.39*(c+d)))
qtukey(1-alpha,k,Nk)/sqrt(2)
AB
AC
AD
BC
BD
CD
#D)
con=1/2*(yA+yB)-1/2*(yC+yD)
con2=c(1/2,1/2,-1/2,-1/2)
contrasts(as.factor(con2),as.factor(c(1,0,-1,0)))
AB=abs(yA-yB)/(sqrt(2.39*(a+b)))
AC=abs(yA-yC)/(sqrt(2.39*(a+c)))
AD=abs(yA-yD)/(sqrt(2.39*(a+d)))
BC=abs(yB-yC)/(sqrt(2.39*(b+c)))
BD=abs(yB-yD)/(sqrt(2.39*(b+d)))
CD=abs(yC-yD)/(sqrt(2.39*(c+d)))
SE=sqrt(2.39*(1/2*a+1/2*b-1/2*c-1/2*d))
b
1/2*a+1/2*b-1/2*c-1/2*d
1/4*a+1/4*b-1/4*c-1/4*d
SE=sqrt(2.39*(1/4*a+1/4*b+1/4*c+1/4*d))
(1/2*yA+1/2*yB-1/2*yC-1/2*yD)/SE
f=(1/2*yA+1/2*yB-1/2*yC-1/2*yD)/SE
pf(f,3,26,lower=F)*2
data=read.csv("cement.csv")
head(data)
data.m = melt(data)
g=lm(value~variable, data = data.m)
anova(g)
Y = as.matrix(data)
n = rep(nrow(Y),ncol(Y))
k=ncol(Y)
N=sum(n)
alpha = 0.05
Yidot = apply(Y, 2, mean) # sample mean for each treatment
avgY = mean(Yidot) # grand mean
kprime <- choose(k,2)
kprime = choose(k,2)
res = sum((Y-t(Yidot%*%t(rep(1,nrow(Y)))))^2)/(N-k)
b=qt(1-(alpha/(2*kprime)), N-k)*sqrt(2/5*res)
t=qtukey(1-alpha,k,N-k)/sqrt(2)*sqrt(2/5*res)
stats=matrix(0,ncol(Y)-1,ncol(Y))
for(j in 1:ncol(Y)-1)
{
for(i in j:ncol(Y))
{
stats[j,i]=Yidot[i]-Yidot[j]
}
}
uppBoundB=stats
uppBoundB[1,2:3]=stats[1,2:3]+b
uppBoundB[2,3]=stats[2,3]+b
lowBoundB=stats
lowBoundB[1,2:3]=stats[1,2:3]-b
lowBoundB[2,3]=stats[2,3]-b
uppBoundT=stats
uppBoundT[1,2:3]=stats[1,2:3]+t
uppBoundT[2,3]=stats[2,3]+t
lowBoundT=stats
lowBoundT[1,2:3]=stats[1,2:3]-t
lowBoundT[2,3]=stats[2,3]-t
uppBoundB
lowBoundB
avgY
head(data.m)
lowBoundB
uppBoundB
lowBoundT
uppBoundT
anova(stats)
anova(data.m)
anova(g)
